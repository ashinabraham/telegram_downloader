name: 🧪 Code Quality & Testing Pipeline

on:
  push:
    branches: [ main, develop, feature/*, bugfix/*, hotfix/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      API_ID: 1234
      API_HASH: dummy
      BOT_TOKEN: dummy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting checks
      run: |
        echo "🔍 Running flake8 linting..."
        python -m flake8 src/ --max-line-length=120 --ignore=E501,W503
        echo "🎨 Running black formatting check..."
        python -m black --check src/ tests/ main.py run_tests.py
        
    - name: Run tests with coverage
      run: |
        echo "🧪 Running pytest with coverage..."
        python -m pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Test Docker build
      run: |
        echo "🐳 Testing Docker build..."
        docker build -t telegram-downloader-test .
        echo "✅ Docker build successful!"
        
    - name: Test Alpine Docker build
      run: |
        echo "🏔️ Testing Alpine Docker build..."
        docker build -t telegram-downloader-alpine -f Dockerfile.alpine .
        echo "✅ Alpine Docker build successful!"
        
    - name: Run tests in Docker container
      run: |
        echo "🧪 Running tests in Docker container..."
        docker run --rm telegram-downloader-test python -m pytest tests/ -v --cov=src --cov-report=term-missing 